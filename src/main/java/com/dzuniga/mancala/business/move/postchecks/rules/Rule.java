package com.dzuniga.mancala.business.move.postchecks.rules;

import com.dzuniga.mancala.business.move.model.MoveResult;
import com.dzuniga.mancala.business.move.model.RuleResult;
import com.dzuniga.mancala.business.move.postchecks.rules.conditions.Condition;
import com.dzuniga.mancala.business.move.postchecks.rules.consequences.Consequence;
import com.dzuniga.mancala.domain.Player;
import lombok.Data;

import java.util.Objects;
import java.util.Optional;

/**
 * Data object composed of two classes: a {@link Condition} and a {@link Consequence}
 * Represents a rule that should be checked after a {@link com.dzuniga.mancala.domain.Move} was applied into the board
 * A rule can generate side effects generated by {@link Consequence}
 * <p>Each one is strongly related.
 */
@Data
public class Rule implements CombinableRule {
  private final Condition condition;
  private final Consequence consequence;

  private Rule(Condition condition, Consequence consequence) {
    Objects.requireNonNull(condition, "The rule condition must not be null");
    Objects.requireNonNull(consequence, "The rule consequence must not be null");

    this.condition = condition;
    this.consequence = consequence;
  }

  public Optional<RuleResult> runRule(MoveResult moveResult, Player currentPlayer) {
    Objects.requireNonNull(moveResult, "The move result must not be null");
    Objects.requireNonNull(currentPlayer, "The current player must not be null");

    if (condition.test(moveResult, currentPlayer)) {
      return Optional.of(consequence.apply(moveResult, currentPlayer));
    }
    return Optional.empty();
  }

  /**
   * Factory Method used to create a rule from a condition and a consequence
   *
   * @param condition {@link Condition}, a {@link java.util.function.Predicate} that can be tested
   * @param consequence {@link Consequence}, a {@link java.util.function.BiFunction} that will be
   *     applied when the condition was met
   * @return new Rule Object
   */
  public static Rule of(Condition condition, Consequence consequence) {
    return new Rule(condition, consequence);
  }
}
